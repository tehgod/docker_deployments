services:
  omada:
    image: mbentley/omada-controller
    restart: unless-stopped
    container_name: omada_controller
    ulimits:
      nofile:
        soft: 4096
        hard: 8192
    network_mode: host
    volumes:
      - ${APPDATA_DIR}/omada_controller:/opt/tplink/EAPController/data
      - ${APPDATA_DIR}/omada_controller:/opt/tplink/EAPController/logs
    environment:
      - PUID=${DOCKER_RUNNER_UID}
      - PGID=${DOCKER_RUNNER_GID}
      - TZ=${TZ}
      - MANAGE_HTTPS_PORT=8043
      - PORTAL_HTTPS_PORT=8043
      - SHOW_SERVER_LOGS=true
      - SHOW_MONGODB_LOGS=false
      - MANAGE_HTTP_PORT=8088
      - PORTAL_HTTP_PORT=8088

  traefik:
    image: traefik:v3.3
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    secrets:
      - cf_dns_api_token
    networks:
      - traefik_proxy
    ports:
      - 80:80
      - 443:443
      - 10015:8085
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${APPDATA_DIR}/traefik/logs:/logs
      - ${APPDATA_DIR}/traefik/acme/acme.json:/acme.json
      - ${APPDATA_DIR}/traefik/rules:/rules
    environment:
      - TZ=${TZ}
      - CF_DNS_API_TOKEN_FILE=/run/secrets/cf_dns_api_token    
      - DOMAINNAME_1 # Passing the domain name to traefik container to be able to use the variable in rules. 
    command: 
      - --global.checkNewVersion=true #check for new version on startup
      - --entrypoints.web.address=:80  #allow port entry
      - --entrypoints.websecure.address=:443 #allow port entry
      - --entrypoints.traefik.address=:8085 #assigns traefik webUI a port to access at
      - --api=true #enable api
      - --api.dashboard=true #enable dashboard
      - --api.insecure=true #allow connection that isn't from FQDN (allows via IP)
      - --serversTransport.insecureSkipVerify=false #enabling skips SSL verification
      - --entrypoints.web.http.redirections.entrypoint.to=websecure #setting a global HTTP to HTTPS redirect
      - --entrypoints.web.http.redirections.entrypoint.scheme=https #setting a global HTTP to HTTPS redirect
      - --entrypoints.web.http.redirections.entrypoint.permanent=true #setting a global HTTP to HTTPS redirect
      - --entrypoints.websecure.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS # allow cloudflare and local IPs
      
      - --log=true #enable logging
      - --log.filePath=/logs/traefik.log #log filepath
      - --log.level=WARN # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true #enable access logging
      - --accessLog.filePath=/logs/access.log #access log filepath
      - --accessLog.bufferingSize=20 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=204-299,400-499,500-599

      - --providers.docker=true #using docker as a provider
      - --providers.docker.endpoint=unix:///var/run/docker.sock #used if using the docker provider
      - --providers.docker.exposedByDefault=false #prevents every service from automatically being added
      - --providers.docker.network=traefik_proxy #very important, this is the network that it will monitor on docker
      
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      - --providers.file.watch=true # prevent needing to restart to see file changes

      - --entrypoints.websecure.http.tls.certresolver=dns-cloudflare
      - --entrypoints.websecure.http.tls.domains[0].main=${DOMAINNAME_1}
      - --entrypoints.websecure.http.tls.domains[0].sans=*.${DOMAINNAME_1}

      #- --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    labels:
      # - "traefik.enable=true"
      - "traefik.http.routers.traefik-rtr.entrypoints=websecure"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME_1`)"
      - "traefik.http.routers.traefik-rtr.service=api@internal" #don't touch this idk
      # Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-no-auth@file"

  authelia:
    container_name: authelia
    image: authelia/authelia:4.37.5
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    ports:
      - 10016:9091
    networks:
      - traefik_proxy
    volumes:
      - ${APPDATA_DIR}/authelia/config:/config
    environment:
      - TZ=$TZ
      - AUTHELIA_JWT_SECRET_FILE=/run/secrets/authelia_jwt_secret
      - AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE=/run/secrets/authelia_storage_encryption_key
      - AUTHELIA_SESSION_SECRET_FILE=/run/secrets/authelia_session_secret
      - DOMAINNAME_1
    secrets:
      - authelia_jwt_secret
      - authelia_storage_encryption_key
      - authelia_session_secret
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.authelia-rtr.entrypoints=websecure"
      - "traefik.http.routers.authelia-rtr.rule=Host(`authelia.$DOMAINNAME_1`)"
      ## Middlewares
      - "traefik.http.routers.authelia-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.authelia-rtr.service=authelia-svc"
      - "traefik.http.services.authelia-svc.loadbalancer.server.port=9091"
    depends_on:
      - traefik

secrets:
  authelia_jwt_secret:
    file: ${APPDATA_DIR}/authelia/secrets/authelia_jwt_secret
  authelia_session_secret:
    file: ${APPDATA_DIR}/authelia/secrets/authelia_session_secret
  authelia_storage_encryption_key:
    file: ${APPDATA_DIR}/authelia/secrets/authelia_storage_encryption_key
  cf_dns_api_token:
    file: ${APPDATA_DIR}/traefik/cf_dns_api_token
networks:
  traefik_proxy:
    name: traefik_proxy
    driver: bridge